import zipfile
import math
from PIL import Image, ImageOps, ImageDraw
import pytesseract
import cv2 as cv
import numpy as np

# loading the face detection classifier
face_cascade = cv.CascadeClassifier('readonly/haarcascade_frontalface_default.xml')

# a single dictionary having list of all files including photos croped photos and processed text
img_src = {}
#opening zip file as archive
with zipfile.ZipFile('readonly/images.zip', 'r') as archive:
    #infolist returns information related to the sile like location image name etc.. 
    for entry in archive.infolist():
        
        
        with archive.open(entry) as file:
            
            img = Image.open(file).convert('RGB')
            img_src[entry.filename] = {'pil_img':img}

#getting all the text fromats into src file           
for img_name in img_src.keys():
    
    text = pytesseract.image_to_string(img_src[img_name]['pil_img'])
    img_src[img_name]['text'] = text

for img_name in img_src.keys():
    open_cv_image = np.array(img_src[img_name]['pil_img']) 
    img_g = cv.cvtColor(open_cv_image, cv.COLOR_BGR2GRAY)
    #using multiscale detection for detecting multiple faces in the news paper
    bounding_boxes = face_cascade.detectMultiScale(img_g, 1.3, 5)
    img_src[img_name]['faces'] = []
    #forming bounding boxes arruond each detected faces
    for x,y,w,h in bounding_boxes:
        face = img_src[img_name]['pil_img'].crop((x,y,x+w,y+h))#import imageops for croping options
        img_src[img_name]['faces'].append(face)
        
#create thumbnails and using antialias method to smothen the boundries after resizing        
for img_name in img_src.keys():
    for face in img_src[img_name]['faces']:
        face.thumbnail((100,100),Image.ANTIALIAS)
#function to get pics related to the given keyword        
def search(keyword):
    for img_name in img_src:
        if (keyword in img_src[img_name]['text']):
            if(len(img_src[img_name]['faces']) != 0):
                print("Result found in file {}".format(img_name))
                h = math.ceil(len(img_src[img_name]['faces'])/5)
                #creation of caontact sheet 
                contact_sheet=Image.new('RGB',(500, 100*h))
                x = 0
                y = 0
                for img in img_src[img_name]['faces']:
                    contact_sheet.paste(img, (x,y))
                    if x + 100 == contact_sheet.width:
                        x = 0
                        y += 100
                    else:
                        x += 100
                        
                display(contact_sheet)
            else:
                print("Result found in file {} \nBut there were no faces in that file\n\n".format(img_name))
    return
            
